from calculation.area_calculator import AreaCalculator
from calculation.insumo import Insumo  # Importando a classe Insumo

class CultureSelection:
    """
    Class to manage agricultural cultures and calculate planting areas.

    The user can:
    1Ô∏è‚É£ Choose two distinct cultures to work with.
    2Ô∏è‚É£ Register new available cultures.
    3Ô∏è‚É£ View all registered cultures.
    4Ô∏è‚É£ Calculate the area for planting based on selected cultures.
    5Ô∏è‚É£ Calculate the necessary inputs (seeds, fertilizer, defensive, etc.) based on the area.
    """

    def __init__(self):
        self.culturas_disponiveis = set()  # Culturas dispon√≠veis para escolha
        self.culturas_escolhidas = set()   # Culturas escolhidas pelo usu√°rio
        self.area_calculator = AreaCalculator()  # Instancia a classe de c√°lculo de √°rea

    def select_culture(self):
        """
        Allows the user to select two distinct cultures to work with.
        The user can only choose cultures that are already registered.

        Returns:
            list: A list containing the two cultures selected by the user.
        """
        if not self.culturas_disponiveis:
            print("‚ö†Ô∏è Nenhuma cultura cadastrada. Cadastre primeiro antes de escolher.")
            return
        
        self.culturas_escolhidas.clear()  # Limpa sele√ß√µes anteriores
        while len(self.culturas_escolhidas) < 2:
            self.registered_cultures()
            cultura = input("Digite a cultura que deseja trabalhar: ").strip().lower()

            if cultura not in self.culturas_disponiveis:
                print("‚ùå Cultura n√£o cadastrada. Cadastre primeiro antes de escolher.")
            elif cultura in self.culturas_escolhidas:
                print("‚ö†Ô∏è Cultura j√° escolhida. Escolha uma diferente.")
            else:
                self.culturas_escolhidas.add(cultura)

        print(f"‚úÖ As culturas escolhidas foram: {', '.join(map(str.capitalize, self.culturas_escolhidas))}")

    def register_culture(self):
        """
        Permite ao usu√°rio cadastrar novas culturas dispon√≠veis para escolha.
        """
        while True:
            cultura = input("Digite o nome da cultura para cadastrar (ou 'sair' para voltar ao menu): ").strip().lower()
            if cultura == "sair":
                break
            if cultura in self.culturas_disponiveis:
                print("‚ö†Ô∏è Cultura j√° cadastrada.")
            else:
                self.culturas_disponiveis.add(cultura)
                print(f"‚úÖ Cultura '{cultura.capitalize()}' cadastrada com sucesso!")

    def registered_cultures(self):
        """
        Exibe as culturas cadastradas at√© o momento.
        """
        if self.culturas_disponiveis:
            print(f"üå± Culturas cadastradas: {', '.join(map(str.capitalize, self.culturas_disponiveis))}")
        else:
            print("‚ö†Ô∏è Nenhuma cultura cadastrada at√© o momento.")

    def menu(self):
        """
        Exibe o menu principal para o usu√°rio escolher uma a√ß√£o.
        """
        while True:
            print("\nüìå MENU PRINCIPAL")
            print("1Ô∏è‚É£ Escolher culturas para trabalhar")
            print("2Ô∏è‚É£ Cadastrar novas culturas")
            print("3Ô∏è‚É£ Ver culturas cadastradas")
            print("4Ô∏è‚É£ Calcular √°rea de plantio")
            print("5Ô∏è‚É£ Calcular insumos necess√°rios")
            print("0Ô∏è‚É£ Sair")

            opcao = input("Escolha uma op√ß√£o: ").strip()

            if opcao == "1":
                self.select_culture()
            elif opcao == "2":
                self.register_culture()
            elif opcao == "3":
                self.registered_cultures()
            elif opcao == "4":
                self.calculate_area_for_selected_cultures()
            elif opcao == "5":
                self.calculate_inputs_for_selected_cultures()
            elif opcao == "0":
                print("üëã Saindo do programa. At√© mais!")
                break
            else:
                print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

    def calculate_area_for_selected_cultures(self):
        """
        Chama o c√°lculo de √°rea separadamente para cada cultura escolhida.
        """
        if not self.culturas_escolhidas:
            print("‚ö†Ô∏è Voc√™ precisa escolher as culturas primeiro.")
            return
        
        for cultura in self.culturas_escolhidas:
            print(f"\nCalculando √°rea para a cultura: {cultura.capitalize()}")
            self.area_calculator.calculate_area(cultura)  # Passa a cultura para o m√©todo de c√°lculo

    def calculate_inputs_for_selected_cultures(self):
        """
        Calcula os insumos necess√°rios para as culturas escolhidas.
        """
        if not self.culturas_escolhidas:
            print("‚ö†Ô∏è Voc√™ precisa escolher as culturas primeiro.")
            return
        
        for cultura in self.culturas_escolhidas:
            print(f"\nCalculando insumos para a cultura: {cultura.capitalize()}")
            insumo = Insumo(cultura)  # Cria uma inst√¢ncia de Insumo para a cultura
            insumo.calcular_insumos()  # Calcula os insumos para a cultura
            for insumo_info in insumo.obter_insumos():
                print(insumo_info)  # Exibe os insumos calculados
